{"version":3,"sources":["OneMovie.js","App.js","serviceWorker.js","index.js"],"names":["movieName","audienceScode","tomatometerScore","OneMovie","props","console","log","undefined","movieData","react_default","a","createElement","className","App","state","moviesData","this","fetchData","axios","get","data","setState","Array","isArray","map","el","src_OneMovie","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6JAGIA,EAAWC,EAAeC,mIAqCfC,EAnCE,SAAAC,GAaf,OAZAC,QAAQC,IAAI,QAASF,QAEGG,IAApBH,EAAMI,WACRR,EAAYI,EAAMI,UAAUR,UAC5BC,EAAgBG,EAAMI,UAAUP,cAChCC,EAAmBE,EAAMI,UAAUN,mBAEnCF,EAAY,GACZC,EAAgB,GAChBC,EAAmB,IAInBO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,UAAKX,IAEPS,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,UAAKV,IAEPQ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,UAAKT,QCAFW,6MA1BbC,MAAQ,CACNC,WAAY,uFAGZC,KAAKC,gLAKkBC,IAAMC,IAAN,+FAAfC,SAGRJ,KAAKK,SAAS,CAAEN,WAAYK,uIAK5B,OAFAf,QAAQC,IAAI,gBAAiBU,KAAKF,MAAMC,YACxCV,QAAQC,IAAI,OAAQgB,MAAMC,QAAQP,KAAKF,MAAMC,aAE3CN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACZU,MAAMC,QAAQP,KAAKF,MAAMC,aACxBC,KAAKF,MAAMC,WAAWS,IAAI,SAAAC,GAAE,OAAIhB,EAAAC,EAAAC,cAACe,EAAD,CAAUlB,UAAWiB,cArB7CE,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.546cdd3f.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nlet movieName, audienceScode, tomatometerScore;\n\nconst OneMovie = props => {\n  console.log(\"props\", props);\n\n  if (props.movieData !== undefined) {\n    movieName = props.movieData.movieName;\n    audienceScode = props.movieData.audienceScode;\n    tomatometerScore = props.movieData.tomatometerScore;\n  } else {\n    movieName = \"\";\n    audienceScode = \"\";\n    tomatometerScore = \"\";\n  }\n\n  return (\n    <div className=\"wrapper\">\n      <table>\n        <tbody>\n          <tr>\n            <th>Movie name</th>\n            <td>{movieName}</td>\n          </tr>\n          <tr>\n            <th>Tomatometer Score</th>\n            <td>{audienceScode}</td>\n          </tr>\n          <tr>\n            <th>Audience Score: </th>\n            <td>{tomatometerScore}</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default OneMovie;\n","import React from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport OneMovie from \"./OneMovie\";\n\nclass App extends React.Component {\n  state = {\n    moviesData: {}\n  };\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  async fetchData() {\n    // Where we're fetching data from\n    const { data } = await axios.get(\n      `https://s3.amazonaws.com/innovid-services-data/rtpool2019/data/movieDB.json`\n    );\n    this.setState({ moviesData: data });\n  }\n  render() {\n    console.log(\"mainComponent\", this.state.moviesData);\n    console.log(\"type\", Array.isArray(this.state.moviesData));\n    return (\n      <div className=\"movieRow\">\n        {Array.isArray(this.state.moviesData) &&\n          this.state.moviesData.map(el => <OneMovie movieData={el} />)}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}